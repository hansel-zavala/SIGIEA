// datasource/db.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  assignedPlans TherapyPlan[]
  createdLecciones Leccion[]
  sessionLogs      SessionLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id            Int      @id @default(autoincrement())
  fullName      String
  dateOfBirth   DateTime
  diagnosis     String?  
  supportLevel  String?  
  isActive      Boolean  @default(true)
  therapyPlans  TherapyPlan[]
  sessionLogs   SessionLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  }

  model TherapyPlan {
  id           Int      @id @default(autoincrement())
  dayOfWeek    String   // Ej: "Lunes", "Martes", etc.
  time         String   // Ej: "10:00"
  isActive     Boolean  @default(true)

  leccion   Leccion  @relation(fields: [leccionId], references: [id])
  leccionId Int

  // --- Aquí ocurre la magia de las relaciones ---
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    Int      // Clave foránea para Student

  therapist    User     @relation(fields: [therapistId], references: [id])
  therapistId  Int      // Clave foránea para User
  sessionLogs  SessionLog[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  }

model Leccion {
  id           Int      @id @default(autoincrement())
  title        String
  objective    String
  description  String?
  category     String?
  keySkill     String?
  isActive     Boolean  @default(true)
  
  // Relación: Quién creó esta lección
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  Int

  // Relación: Qué planes terapéuticos usan esta lección
  therapyPlans TherapyPlan[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  }

  model SessionLog {
  id           Int      @id @default(autoincrement())
  date         DateTime // La fecha específica en que ocurrió la sesión
  attendance   AttendanceStatus // Usa nuestro nuevo tipo Enum
  notes        String   @db.Text // @db.Text permite textos muy largos
  behavior     String?  @db.Text
  progress     String?  @db.Text

  // --- Relaciones ---
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    Int

  therapist    User        @relation(fields: [therapistId], references: [id])
  therapistId  Int

  therapyPlan  TherapyPlan @relation(fields: [therapyPlanId], references: [id])
  therapyPlanId Int

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

  enum AttendanceStatus {
  Presente
  Ausente
  Justificado
}