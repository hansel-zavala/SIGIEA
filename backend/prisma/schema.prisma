// datasource/db.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Modelos de Usuario y Estudiante (Existentes) ---
model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String?
  role             String             @default("admin")
  therapistProfile TherapistProfile?
  guardian         Guardian?
  createdLecciones Leccion[]
  createdReports   Report[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Student {
  id                     Int       @id @default(autoincrement())
  nombres                String
  apellidos              String
  dateOfBirth            DateTime
  isActive               Boolean   @default(true)
  lugarNacimiento        String?
  direccion              String?
  institucionProcedencia String?
  recibioEvaluacion      Boolean   @default(false)
  resultadoEvaluacionUrl String?
  anoIngreso             DateTime  @default(now()) @map("año_ingreso")
  zona                   Zona?
  jornada                Jornada?
  genero                 Genero?
  institutoIncluido      String?
  partidaNacimientoUrl   String?
  atencionGrupal         Boolean   @default(false)
  atencionIndividual     Boolean   @default(false)
  atencionPrevocacional  Boolean   @default(false)
  atencionDistancia      Boolean   @default(false)
  terapiaDomicilio       Boolean   @default(false)
  atencionVocacional     Boolean   @default(false)
  inclusionEscolar       Boolean   @default(false)
  educacionFisica        Boolean   @default(false)
  tipoSangre             TipoSangre?
  medicamentos           Medicamento[] @relation("MedicamentoToStudent")
  alergias               Alergia[]     @relation("AlergiaToStudent")
  therapist              TherapistProfile? @relation(fields: [therapistId], references: [id])
  therapistId            Int?
  therapySessions        TherapySession[]
  guardians              Guardian[]
  reports                Report[] // Relación con los reportes del estudiante
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

// --- NUEVOS MODELOS PARA REPORTES DINÁMICOS ---

// Plantilla principal del reporte (ej. "Informe Semestral 2025")
model ReportTemplate {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?  @db.Text
  isActive    Boolean  @default(true)
  sections    ReportSection[]
  reports     Report[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Secciones dentro de una plantilla (ej. "Socialización", "Comunicación")
model ReportSection {
  id         Int      @id @default(autoincrement())
  title      String
  order      Int // Para mantener el orden de las secciones
  template   ReportTemplate @relation(fields: [templateId], references: [id])
  templateId Int
  items      ReportItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Items a evaluar dentro de cada sección (ej. "Saluda y se despide")
model ReportItem {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  order       Int // Para mantener el orden de los ítems
  section     ReportSection @relation(fields: [sectionId], references: [id])
  sectionId   Int
  answers     ReportItemAnswer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// El reporte específico llenado por un terapeuta para un alumno
model Report {
  id              Int      @id @default(autoincrement())
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       Int
  therapist       User     @relation(fields: [therapistId], references: [id])
  therapistId     Int
  template        ReportTemplate @relation(fields: [templateId], references: [id])
  templateId      Int
  reportDate      DateTime @default(now())
  attendance      String?  // Asistencia general al semestre
  summary         String?  @db.Text
  therapyActivities String? @db.Text
  conclusions     String?  @db.Text
  recommendations String?  @db.Text
  itemAnswers     ReportItemAnswer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// La respuesta/calificación para un ítem específico en un reporte
model ReportItemAnswer {
  id         Int      @id @default(autoincrement())
  report     Report   @relation(fields: [reportId], references: [id])
  reportId   Int
  item       ReportItem @relation(fields: [itemId], references: [id])
  itemId     Int
  level      AcquisitionLevel
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([reportId, itemId]) // Un ítem solo puede tener una respuesta por reporte
}


// --- Modelos existentes (Guardian, TherapistProfile, etc.) ---
model Guardian {
  id                    Int         @id @default(autoincrement())
  nombres                 String
  apellidos               String
  direccionEmergencia     String?
  numeroIdentidad         String      @unique
  telefono                String
  parentesco              Parentesco
  copiaIdentidadUrl       String?
  observaciones           String?     @db.Text
  isActive                Boolean     @default(true)
  student                 Student     @relation(fields: [studentId], references: [id])
  studentId               Int
  user                    User?       @relation(fields: [userId], references: [id])
  userId                  Int?        @unique
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model TherapistProfile {
  id                Int       @id @default(autoincrement())
  nombres           String
  apellidos         String
  identityNumber    String    @unique @map("numero_identidad")
  dateOfBirth       DateTime? @map("fecha_nacimiento")
  gender            Genero?
  phone             String?
  email             String    @unique
  specialty         ProfessionalType @map("tipo_profesional")
  hireDate          DateTime? @default(now()) @map("fecha_ingreso")
  identityCardUrl   String?   @map("copia_identidad_url")
  resumeUrl         String?   @map("curriculum_url")
  isActive          Boolean   @default(true)
  workStartTime     String    @default("08:00")
  workEndTime       String    @default("17:00")
  lunchStartTime    String    @default("12:00")
  lunchEndTime      String    @default("13:00")
  workDays          Json      @default("[1,2,3,4,5]")
  user              User      @relation(fields: [userId], references: [id])
  userId            Int       @unique
  assignedStudents  Student[]
  therapySessions   TherapySession[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model TherapySession {
  id          Int      @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  status      SessionStatus @default(Programada)
  notes       String?  @db.Text
  behavior    String?  @db.Text
  progress    String?  @db.Text
  duration    Int      @default(45)
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  therapist   TherapistProfile @relation(fields: [therapistId], references: [id])
  therapistId Int
  leccion     Leccion  @relation(fields: [leccionId], references: [id])
  leccionId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Leccion {
  id           Int      @id @default(autoincrement())
  title        String
  objective    String   @db.Text
  description  String?  @db.Text
  category     String?
  keySkill     String?
  isActive     Boolean  @default(true)
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  Int
  therapySessions TherapySession[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.Text
  startDate   DateTime
  endDate     DateTime
  isAllDay    Boolean   @default(false)
  location    String?
  audience    EventAudience @default(General)
  isActive    Boolean   @default(true)
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Medicamento {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  students  Student[] @relation("MedicamentoToStudent")

  @@map("medicamentos")
}

model Alergia {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  students  Student[] @relation("AlergiaToStudent")

  @@map("alergias")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  color  String
  events Event[]
}

enum SessionStatus {
  Programada
  Completada
  Cancelada
  Ausente
}

enum Zona {
  Rural
  Urbano
}

enum Jornada {
  Matutina
  Vespertina
}

enum Genero {
  Masculino
  Femenino
}

enum Parentesco {
  Padre
  Madre
  Tutor_Legal
  Otro
}

enum ProfessionalType {
  Psicologo
  Terapeuta
  Ambos
}

enum TipoSangre {
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum EventAudience {
  General
  Padres
  Terapeutas
}

// --- ENUMS ---
enum AcquisitionLevel {
  CONSEGUIDO
  CON_AYUDA_ORAL
  CON_AYUDA_GESTUAL
  CON_AYUDA_FISICA
  NO_CONSEGUIDO
  NO_TRABAJADO
}