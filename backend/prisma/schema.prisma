// datasource/db.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  therapistProfile TherapistProfile?
  guardian         Guardian?
  assignedPlans TherapyPlan[]
  createdLecciones Leccion[]
  sessionLogs      SessionLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                      Int      @id @default(autoincrement())
  fullName                String
  dateOfBirth             DateTime
  isActive                Boolean  @default(true)
  lugarNacimiento         String?
  direccion               String?
  institucionProcedencia  String?
  recibioEvaluacion       Boolean  @default(false)
  resultadoEvaluacionUrl  String?  
  anoIngreso              DateTime @default(now()) @map("año_ingreso")
  zona                    Zona?
  jornada                 Jornada?
  genero                  Genero?
  institutoIncluido       String?
  partidaNacimientoUrl    String? 
  atencionGrupal          Boolean @default(false)
  atencionIndividual      Boolean @default(false)
  atencionPrevocacional   Boolean @default(false)
  atencionDistancia       Boolean @default(false)
  terapiaDomicilio        Boolean @default(false)
  atencionVocacional      Boolean @default(false)
  inclusionEscolar        Boolean @default(false)
  educacionFisica         Boolean @default(false)
  usaMedicamentos         Boolean @default(false)
  cualesMedicamentos      String?
  esAlergico              Boolean @default(false)
  cualesAlergias          String?
  therapist               TherapistProfile? @relation(fields: [therapistId], references: [id])
  therapistId             Int?
  therapyPlans            TherapyPlan[]
  sessionLogs             SessionLog[]
  guardians               Guardian[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Guardian {
  id                      Int         @id @default(autoincrement())
  fullName                String
  direccionEmergencia     String?
  numeroIdentidad         String      @unique
  telefono                String
  parentesco              Parentesco
  copiaIdentidadUrl       String?     // Para el archivo
  observaciones           String?     @db.Text
  isActive                Boolean     @default(true)
  student                 Student     @relation(fields: [studentId], references: [id])
  studentId               Int
  user                    User?       @relation(fields: [userId], references: [id])
  userId                  Int?        @unique
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model TherapistProfile {
  id                Int       @id @default(autoincrement())
  fullName          String
  identityNumber    String    @unique @map("numero_identidad")
  dateOfBirth       DateTime? @map("fecha_nacimiento")
  gender            Genero?
  phone             String?
  email             String    @unique
  specialty         ProfessionalType @map("tipo_profesional") // Usamos el nuevo Enum
  hireDate          DateTime? @default(now()) @map("fecha_ingreso")
  identityCardUrl   String?   @map("copia_identidad_url")
  resumeUrl         String?   @map("curriculum_url")
  isActive          Boolean   @default(true)

  // Relación uno a uno con la cuenta de usuario
  user              User      @relation(fields: [userId], references: [id])
  userId            Int       @unique

  // Relación: Qué estudiantes tiene asignados este terapeuta
  assignedStudents  Student[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

  model TherapyPlan {
  id           Int      @id @default(autoincrement())
  dayOfWeek    String   // Ej: "Lunes", "Martes", etc.
  time         String   // Ej: "10:00"
  isActive     Boolean  @default(true)

  leccion   Leccion  @relation(fields: [leccionId], references: [id])
  leccionId Int

  // --- Aquí ocurre la magia de las relaciones ---
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    Int      // Clave foránea para Student

  therapist    User     @relation(fields: [therapistId], references: [id])
  therapistId  Int      // Clave foránea para User
  sessionLogs  SessionLog[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  }

model Leccion {
  id           Int      @id @default(autoincrement())
  title        String
  objective    String   @db.Text
  description  String?  @db.Text
  category     String?
  keySkill     String?
  isActive     Boolean  @default(true)
  
  // Relación: Quién creó esta lección
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  Int

  // Relación: Qué planes terapéuticos usan esta lección
  therapyPlans TherapyPlan[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  }

  model SessionLog {
  id           Int      @id @default(autoincrement())
  date         DateTime // La fecha específica en que ocurrió la sesión
  attendance   AttendanceStatus // Usa nuestro nuevo tipo Enum
  notes        String   @db.Text // @db.Text permite textos muy largos
  behavior     String?  @db.Text
  progress     String?  @db.Text

  // --- Relaciones ---
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    Int

  therapist    User        @relation(fields: [therapistId], references: [id])
  therapistId  Int

  therapyPlan  TherapyPlan @relation(fields: [therapyPlanId], references: [id])
  therapyPlanId Int

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

  enum AttendanceStatus {
  Presente
  Ausente
  Justificado
}

enum Zona {
  Rural
  Urbano
}

enum Jornada {
  Matutina
  Vespertina
}

enum Genero {
  Masculino
  Femenino
}

enum Parentesco {
  Padre
  Madre
  Tutor_Legal
  Otro
}

enum ProfessionalType {
  Psicologo
  Terapeuta
  Ambos
}